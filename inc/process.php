<?php

$emp_type_payment = get_option('emp_type_payment');

if ( $emp_type_payment == '' ) {
	$emp_type_payment = 'sandbox';
}

if ( $emp_type_payment == 'sandbox' ) {
	$publishable_key 	= get_option('sandbox_stripe_api_publishable_key');
	$secret_key 		= get_option('sandbox_stripe_api_secret_key');
} else if ( $emp_type_payment == 'livemod' ) {
	$publishable_key 	= get_option('livemode_stripe_api_publishable_key');
	$secret_key 		= get_option('livemode_stripe_api_secret_key');
}

global $stripe;

$stripe = [
	'secret_key'		=> $secret_key,
	'publishable_key'	=> $publishable_key
];

// echo $stripe['secret_key']; die();

function generateRandomString($length = 10) {
    $characters = '0123456789_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

function payment_by_stripe_func() {

	global $stripe;

	if( isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce') ) {
 		
 		$price 						= $_POST['price-to-charge'];
 		$set_donation_monthly 		= $_POST['set-monthly-donation-payment'];

		// retrieve the token generated by stripe-processing.js'sk_test_AYj3ANyr1NQalzARMzVItvwI00dHgaFvfY'
		$token = $_POST['stripeToken'];
		$email = $_POST['email-payment'];
		$price = (int) $price;

		\Stripe\Stripe::setApiKey( $stripe['secret_key'] );

		// Process if user wanna monthly payment.
		if ( $set_donation_monthly == 'on' ) {

			$plan__id = 'plan_' . generateRandomString(14);

			// Create new Plan with API(s).
			\Stripe\Plan::create([
			  	'amount' 	=> $price * 100,
			  	'interval' 	=> 'month',
			  	'product' 	=> [
			    	'name' 	=> $email
			  	],
			  	'currency' 	=> 'usd',
			  	'id' 		=> $plan__id
			]);

			// Create new user to subscriptions Plan we just created.
			$customer = \Stripe\Customer::create([
				'email' 	=> $email,
				'source' 	=> $token
			]);

			// Subscription new user with new Plan with API(s).
			\Stripe\Subscription::create([
			  	"customer" 	=> $customer->id,
			  	"items" 	=> [[
			      	"plan" 	=> $plan__id,
			    ],]
			]);


			// redirect on successful payment
			$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);

		} else {
	 		try {
				$charge = \Stripe\Charge::create(
					array(
						'amount' 	=> $price * 100,
						'currency' 	=> 'usd',
						'card' 		=> $token
					)
				);
	 
				// redirect on successful payment
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
	 
			} catch (Exception $e) {
				// redirect on failed payment
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}
		}
		// redirect back to our previous page with the added query variable
		wp_redirect($redirect); exit;
	}
}
add_action('init', 'payment_by_stripe_func');